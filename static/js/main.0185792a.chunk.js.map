{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","split","map","el","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","filter","length","Alert","alert","role","word","lower","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0185792a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n                {/* <a className=\"nav-link\" href=\"/about\">\r\n                  {props.aboutText}\r\n                </a> */}\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n  };\r\n\r\n  const handleCapitalize = () => {\r\n    let newText = text\r\n      .split(\" \")\r\n      .map((el) => el.charAt(0).toUpperCase() + el.slice(1))\r\n      .join(\" \");\r\n    setText(newText);\r\n    props.showAlert(\"Text Capitalized!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied!\", \"success\");\r\n  };\r\n\r\n  const handleClearText = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //! text = \"new text\"; // Wrong way to change the state\r\n  //? setText(\"new text\") // Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"10\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#282e2a\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCapitalize}>\r\n          Capitalize\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          <strong>{text.split(\" \").filter(el => el !== \"\").length}</strong> words and\r\n          <strong> {text.length}</strong> chartacters\r\n        </p>\r\n        <p>\r\n          Approx. <strong>{0.008 * text.split(\" \").filter(el => el !== \"\").length}</strong> Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n      </div>\r\n  );\r\n}\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#282e2a\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Lite\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm\n                heading=\"Enter The Text To Analyze Below\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}